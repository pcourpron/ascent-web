{"ast":null,"code":"import _classCallCheck from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Desktop/react-native-app/ascent-web/client/src/components/Graph/Graphs.js\";\nimport React from 'react';\nimport Select from 'react-select';\nimport { Line } from 'react-chartjs-2';\nimport * as chartjs from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport Navbar from '../ClientPickNavbar/ClientPickNavbar';\n\nvar DataScatter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DataScatter, _React$Component);\n\n  function DataScatter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataScatter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataScatter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fitnessArray: _this.props.fitness,\n      fitnessValues: [],\n      fatigueArray: _this.props.fatigue,\n      fatigueValues: [],\n      freshnessArray: _this.props.freshness,\n      freshnessValues: [],\n      weight: _this.props.weight,\n      labels: [],\n      options: [{\n        value: 8,\n        label: 'Past 7 Days'\n      }, {\n        value: 15,\n        label: 'Past 14 Days'\n      }, {\n        value: 31,\n        label: 'Past Month'\n      }, {\n        value: 91,\n        label: 'Past 3 Months'\n      }, {\n        value: 365,\n        label: 'Past Year'\n      }, {\n        value: _this.props.fitness.length,\n        label: 'All Time'\n      }],\n      selected: 'Pick a range',\n      selected_value: 400,\n      graphs: [{\n        value: 'freshness'\n      }]\n    };\n\n    _this.dropdownChange = function (event) {\n      if (event.value !== _this.state.selected_value) {\n        (function () {\n          var start = _this.props.fitness.length - event.value;\n\n          for (var i = 0; i < _this.state.options.length; i++) {\n            if (_this.state.options[i].value === event.value) {\n              _this.setState({\n                selected: _this.state.options[i].label,\n                selected_value: event.value\n              }, function () {\n                _this.setState({\n                  fitnessArray: _this.props.fitness.slice(start),\n                  fatigueArray: _this.props.fatigue.slice(start),\n                  freshnessArray: _this.props.freshness.slice(start),\n                  weight: _this.props.weight.slice(start)\n                }, function () {\n                  _this.getFitnessValues();\n                });\n              });\n            }\n          }\n        })();\n      }\n    };\n\n    _this.multiDropDownChange = function (event) {\n      _this.setState({\n        graphs: event\n      });\n    };\n\n    _this.getFitnessValues = function () {\n      var placeholderFitnessScores = [];\n      var placeholderFatigueScores = [];\n      var placeholderFreshnessScores = [];\n      var placeholderWeights = [];\n      var placeholderLabels = [];\n\n      _this.state.fitnessArray.forEach(function (element) {\n        placeholderFitnessScores.push(element.y);\n\n        if (_this.state.selected_value < 365) {\n          placeholderLabels.push(element.x.format('MMM DD'));\n        } else {\n          placeholderLabels.push(element.x.format('MMM DD Y'));\n        }\n      });\n\n      _this.state.fatigueArray.forEach(function (element) {\n        placeholderFatigueScores.push(element.y);\n      });\n\n      _this.state.freshnessArray.forEach(function (element) {\n        placeholderFreshnessScores.push(element.y);\n      });\n\n      _this.state.weight.forEach(function (element) {\n        placeholderWeights.push(element.y);\n      });\n\n      _this.setState({\n        freshnessValues: placeholderFreshnessScores,\n        fatigueValues: placeholderFatigueScores,\n        fitnessValues: placeholderFitnessScores,\n        labels: placeholderLabels,\n        weight: placeholderWeights\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DataScatter, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getFitnessValues();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = {\n        response: true,\n        maintainAspectRatio: false,\n        legend: false,\n        title: {\n          display: true,\n          text: 'Freshness Scores',\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxTicksLimit: this.state.selected_value > 300 ? 12 : 14\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              max: 20,\n              min: -35\n            }\n          }]\n        },\n        annotation: {\n          annotations: [{\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -10,\n            yMax: 1000,\n            borderColor: 'rgba(255,159,64,1)',\n            backgroundColor: 'rgba(255,159,64,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -30,\n            yMax: -10,\n            borderColor: 'rgba(0,255,0,1)',\n            backgroundColor: 'rgba(0,255,0,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -300,\n            yMax: -30,\n            borderColor: 'rgba(255,0,0,1)',\n            backgroundColor: 'rgba(255,0,0,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -10,\n            yMax: 10,\n            borderColor: 'rgba(0,100,255,.5)',\n            backgroundColor: 'rgba(0,100,255,0.2)',\n            borderWidth: 1\n          }]\n        }\n      };\n      var data = {\n        labels: this.state.labels,\n        datasets: [{\n          label: 'Freshness',\n          fill: false,\n          lineTension: 0.1,\n          index: 10,\n          backgroundColor: 'rgba(255,0,0,0.2)',\n          borderColor: 'rgba(255,0,0,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(255,0,0,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n          pointHoverBorderColor: 'rgba(255,0,0,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 2,\n          pointHitRadius: 10,\n          data: this.props.fitne\n        }]\n      };\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        style: {\n          minHeight: '100vh',\n          backgroundImage: 'linear-gradient(to right top, #0043a8, #007cdb, #00abc8, #00d27f, #a8eb12)',\n          paddingTop: '100px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          height: '150px',\n          backgroundColor: 'whitesmoke',\n          borderRadius: '5px',\n          marginBottom: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Parameters\")), React.createElement(\"div\", {\n        className: \"row justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Select Range:\")), React.createElement(\"div\", {\n        class: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Select, {\n        onChange: this.dropdownChange,\n        options: this.state.options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"col-sm-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Data to See:\")), React.createElement(\"div\", {\n        class: \"col-sm-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(Select, {\n        options: [{\n          label: 'Freshness',\n          value: \"freshness\"\n        }, {\n          label: 'Fatigue',\n          value: \"fatigue\"\n        }, {\n          label: 'Fitness',\n          value: \"fitness\"\n        }],\n        isMulti: true,\n        defaultValue: {\n          label: \"Freshness\"\n        },\n        className: \"basic-multi-select\",\n        classNamePrefix: \"select\",\n        onChange: this.multiDropDownChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        style: {\n          minHeight: '400px',\n          backgroundColor: 'whitesmoke',\n          borderRadius: '5px',\n          paddingBottom: '50px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, this.state.graphs.map(function (element) {\n        var newData = JSON.parse(JSON.stringify(data));\n        var newOptions = JSON.parse(JSON.stringify(options));\n        newData.datasets[0].data = _this2.props.sleep; //this.state[`${element.value}Values`]\n\n        if (element.value !== 'freshness') {\n          console.log(_this2.state[\"\".concat(element.value, \"Values\")]);\n\n          var placeholderArray = _this2.state[\"\".concat(element.value, \"Values\")];\n\n          newOptions.scales.yAxes = [{\n            ticks: {\n              max: Math.max.apply(null, placeholderArray) + 5,\n              min: 0\n            }\n          }];\n          console.log(element.value[0]);\n          newOptions.title.text = \"\".concat(element.value[0].toUpperCase()).concat(element.value.slice(1), \" Values\");\n        }\n\n        return React.createElement(\"div\", {\n          class: \"row\",\n          style: {\n            height: '400px',\n            padding: '0 20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, React.createElement(Line, {\n          data: newData,\n          options: newOptions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return DataScatter;\n}(React.Component);\n\nexport default DataScatter;","map":{"version":3,"sources":["/Users/admin/Desktop/react-native-app/ascent-web/client/src/components/Graph/Graphs.js"],"names":["React","Select","Line","chartjs","Navbar","DataScatter","state","fitnessArray","props","fitness","fitnessValues","fatigueArray","fatigue","fatigueValues","freshnessArray","freshness","freshnessValues","weight","labels","options","value","label","length","selected","selected_value","graphs","dropdownChange","event","start","i","setState","slice","getFitnessValues","multiDropDownChange","placeholderFitnessScores","placeholderFatigueScores","placeholderFreshnessScores","placeholderWeights","placeholderLabels","forEach","element","push","y","x","format","response","maintainAspectRatio","legend","title","display","text","fontSize","scales","xAxes","ticks","maxTicksLimit","yAxes","max","min","annotation","annotations","type","xScaleID","yScaleID","xMin","xMax","yMin","yMax","borderColor","backgroundColor","borderWidth","data","datasets","fill","lineTension","index","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fitne","minHeight","backgroundImage","paddingTop","height","borderRadius","marginBottom","paddingBottom","map","newData","JSON","parse","stringify","newOptions","sleep","console","log","placeholderArray","Math","apply","toUpperCase","padding","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport { Line } from 'react-chartjs-2';\nimport * as chartjs from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport Navbar from '../ClientPickNavbar/ClientPickNavbar'\n\n\nclass DataScatter extends React.Component {\n\n    state = {\n        fitnessArray: this.props.fitness,\n        fitnessValues: [],\n        fatigueArray: this.props.fatigue,\n        fatigueValues: [],\n        freshnessArray: this.props.freshness,\n        freshnessValues: [],\n        weight: this.props.weight,\n\n        labels: [],\n        options: [\n            { value: 8, label: 'Past 7 Days' },\n            { value: 15, label: 'Past 14 Days' },\n            { value: 31, label: 'Past Month' },\n            { value: 91, label: 'Past 3 Months' },\n            { value: 365, label: 'Past Year' },\n            { value: this.props.fitness.length, label: 'All Time' }\n        ],\n        selected: 'Pick a range',\n        selected_value: 400,\n        graphs: [{ value: 'freshness', }]\n    }\n\n\n    dropdownChange = (event) => {\n        if (event.value !== this.state.selected_value) {\n            let start = this.props.fitness.length - (event.value)\n            for (let i = 0; i < this.state.options.length; i++) {\n                if (this.state.options[i].value === event.value) {\n                    this.setState({ selected: this.state.options[i].label, selected_value: event.value }, () => {\n                        this.setState({ fitnessArray: this.props.fitness.slice(start), fatigueArray: this.props.fatigue.slice(start), freshnessArray: this.props.freshness.slice(start), weight: this.props.weight.slice(start) }, () => {\n                            this.getFitnessValues()\n                        })\n                    })\n\n                }\n            }\n        }\n    }\n\n    multiDropDownChange = (event) => {\n        this.setState({ graphs: event })\n    }\n\n    getFitnessValues = () => {\n        let placeholderFitnessScores = [];\n        let placeholderFatigueScores = [];\n        let placeholderFreshnessScores = [];\n        let placeholderWeights = [];\n        let placeholderLabels = [];\n\n\n        this.state.fitnessArray.forEach(element => {\n            placeholderFitnessScores.push(element.y)\n            if (this.state.selected_value < 365) {\n                placeholderLabels.push(element.x.format('MMM DD'))\n            }\n            else {\n                placeholderLabels.push(element.x.format('MMM DD Y'))\n\n            }\n        })\n\n        this.state.fatigueArray.forEach(element => {\n            placeholderFatigueScores.push(element.y)\n        })\n\n        this.state.freshnessArray.forEach(element => {\n            placeholderFreshnessScores.push(element.y)\n        })\n        this.state.weight.forEach(element => {\n            placeholderWeights.push(element.y)\n        })\n\n\n\n        this.setState({ freshnessValues: placeholderFreshnessScores, fatigueValues: placeholderFatigueScores, fitnessValues: placeholderFitnessScores, labels: placeholderLabels, weight:placeholderWeights })\n    }\n\n    componentWillMount() {\n        this.getFitnessValues()\n    }\n\n\n\n    render() {\n        let options = {\n            response: true,\n            maintainAspectRatio: false,\n            legend: false,\n            title: {\n                display: true,\n                text: 'Freshness Scores',\n                fontSize: 18\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n\n                        maxTicksLimit: this.state.selected_value > 300 ? 12 : 14\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                        max: 20,\n                        min: -35\n                    }\n                }]\n            },\n            annotation: {\n\n                annotations: [{\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -10,\n                    yMax: 1000,\n                    borderColor: 'rgba(255,159,64,1)',\n                    backgroundColor: 'rgba(255,159,64,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -30,\n                    yMax: -10,\n                    borderColor: 'rgba(0,255,0,1)',\n                    backgroundColor: 'rgba(0,255,0,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -300,\n                    yMax: -30,\n                    borderColor: 'rgba(255,0,0,1)',\n                    backgroundColor: 'rgba(255,0,0,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -10,\n                    yMax: 10,\n                    borderColor: 'rgba(0,100,255,.5)',\n                    backgroundColor: 'rgba(0,100,255,0.2)',\n                    borderWidth: 1\n                }\n                ]\n            }\n        }\n\n        let data = {\n            labels: this.state.labels,\n            datasets: [\n                {\n                    label: 'Freshness',\n                    fill: false,\n                    lineTension: 0.1,\n                    index: 10,\n                    backgroundColor: 'rgba(255,0,0,0.2)',\n                    borderColor: 'rgba(255,0,0,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(255,0,0,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n                    pointHoverBorderColor: 'rgba(255,0,0,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 2,\n                    pointHitRadius: 10,\n                    data:this.props.fitne\n                },\n\n            ]\n        }\n\n\n        return (\n            <div className='container-fluid' style={{ minHeight: '100vh', backgroundImage: 'linear-gradient(to right top, #0043a8, #007cdb, #00abc8, #00d27f, #a8eb12)', paddingTop: '100px' }}>\n                <Navbar />\n\n                <div style={{ height: '150px', backgroundColor: 'whitesmoke', borderRadius: '5px', marginBottom: '20px' }}>\n                    <div className='row justify-content-center'>\n                        <h3>Parameters</h3>\n                    </div>\n                    <div className='row justify-content-center'>\n                        <div className='col-sm-4'>\n                            <div class='col-sm-6'>\n                                <h6>Select Range:</h6>\n                            </div>\n                            <div class='col-sm-6'>\n                                <Select\n                                    onChange={this.dropdownChange}\n                                    options={this.state.options}\n                                />\n                            </div>\n                        </div>\n                        <div className='col-sm-8'>\n                            <div class='col-sm-6'>\n                                <h6>Data to See:</h6>\n                            </div>\n                            <div class='col-sm-6'>\n                                <Select\n                                    options={[{ label: 'Freshness', value: \"freshness\" }, { label: 'Fatigue', value: \"fatigue\" }, { label: 'Fitness', value: \"fitness\" }]}\n                                    isMulti\n                                    defaultValue={{ label: \"Freshness\" }}\n                                    className=\"basic-multi-select\"\n                                    classNamePrefix=\"select\"\n                                    onChange={this.multiDropDownChange}\n                                />\n                            </div>\n                        </div>\n\n                    </div>\n\n\n\n                </div>\n\n                <div style={{ minHeight: '400px', backgroundColor: 'whitesmoke', borderRadius: '5px', paddingBottom: '50px' }}>\n\n                    {\n                        this.state.graphs.map((element => {\n                            let newData = JSON.parse(JSON.stringify(data))\n                            let newOptions = JSON.parse(JSON.stringify(options))\n                            newData.datasets[0].data = this.props.sleep//this.state[`${element.value}Values`]\n\n                            if (element.value !== 'freshness') {\n                                console.log(this.state[`${element.value}Values`])\n                                var placeholderArray = this.state[`${element.value}Values`]\n                                newOptions.scales.yAxes = [{\n                                    ticks: {\n                                        max: Math.max.apply(null, placeholderArray) + 5,\n                                        min: 0\n                                    }\n                                }]\n\n\n                                 console.log(element.value[0])\n                                newOptions.title.text = `${element.value[0].toUpperCase()}${element.value.slice(1)} Values`\n                            }\n\n                            return (\n                            <div class='row' style={{height:'400px',padding:'0 20px'}}>\n                                <Line data={newData} options={newOptions} />\n                            </div>)\n\n                        })\n                        )}\n\n\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\nexport default DataScatter"]},"metadata":{},"sourceType":"module"}