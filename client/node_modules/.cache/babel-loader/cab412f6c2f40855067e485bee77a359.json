{"ast":null,"code":"import _classCallCheck from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Desktop/react-native-app/ascent-web/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/admin/Desktop/react-native-app/ascent-web/client/src/components/Graph/Graphs.js\";\nimport React from 'react';\nimport Dropdown from 'react-dropdown';\nimport { Line } from 'react-chartjs-2';\nimport * as chartjs from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport Navbar from '../ClientPickNavbar/ClientPickNavbar';\n\nvar DataScatter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DataScatter, _React$Component);\n\n  function DataScatter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataScatter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataScatter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fitnessArray: _this.props.fitness,\n      fitnessValues: [],\n      fatigueArray: _this.props.fatigue,\n      fatigueValues: [],\n      freshnessArray: _this.props.freshness,\n      freshnessValues: [],\n      labels: [],\n      options: [{\n        value: 8,\n        label: 'Past 7 Days'\n      }, {\n        value: 15,\n        label: 'Past 14 Days'\n      }, {\n        value: 31,\n        label: 'Past Month'\n      }, {\n        value: 91,\n        label: 'Past 3 Months'\n      }, {\n        value: 365,\n        label: 'Past Year'\n      }, {\n        value: _this.props.fitness.length,\n        label: 'All Time'\n      }],\n      selected: 'Pick a range',\n      selected_value: 400\n    };\n\n    _this.dropdownChange = function (event) {\n      if (event.value !== _this.state.selected_value) {\n        (function () {\n          var start = _this.props.fitness.length - event.value;\n\n          for (var i = 0; i < _this.state.options.length; i++) {\n            if (_this.state.options[i].value === event.value) {\n              _this.setState({\n                selected: _this.state.options[i].label,\n                selected_value: event.value\n              }, function () {\n                _this.setState({\n                  fitnessArray: _this.props.fitness.slice(start),\n                  fatigueArray: _this.props.fatigue.slice(start),\n                  freshnessArray: _this.props.freshness.slice(start)\n                }, function () {\n                  _this.getFitnessValues();\n                });\n              });\n            }\n          }\n        })();\n      }\n    };\n\n    _this.getFitnessValues = function () {\n      var placeholderFitnessScores = [];\n      var placeholderFatigueScores = [];\n      var placeholderFreshnessScores = [];\n      var placeholderLabels = [];\n\n      _this.state.fitnessArray.forEach(function (element) {\n        placeholderFitnessScores.push(element.y);\n\n        if (_this.state.selected_value < 365) {\n          placeholderLabels.push(element.x.format('MMM DD'));\n        } else {\n          placeholderLabels.push(element.x.format('MMM DD Y'));\n        }\n      });\n\n      _this.state.fatigueArray.forEach(function (element) {\n        placeholderFatigueScores.push(element.y);\n      });\n\n      _this.state.freshnessArray.forEach(function (element) {\n        placeholderFreshnessScores.push(element.y);\n      });\n\n      _this.setState({\n        freshnessValues: placeholderFreshnessScores,\n        fatigueValues: placeholderFatigueScores,\n        fitnessValues: placeholderFitnessScores,\n        labels: placeholderLabels\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DataScatter, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getFitnessValues();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var options = {\n        response: true,\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxTicksLimit: this.state.selected_value > 300 ? 12 : 14\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              max: Math.round(Math.max.apply(null, this.state.freshnessValues)) + 5,\n              min: Math.round(Math.min.apply(null, this.state.freshnessValues)) - 5\n            }\n          }]\n        },\n        annotation: {\n          annotations: [{\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -10,\n            yMax: 1000,\n            borderColor: 'rgba(255,159,64,1)',\n            backgroundColor: 'rgba(255,159,64,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -30,\n            yMax: -10,\n            borderColor: 'rgba(0,255,0,1)',\n            backgroundColor: 'rgba(0,255,0,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -300,\n            yMax: -30,\n            borderColor: 'rgba(255,0,0,1)',\n            backgroundColor: 'rgba(255,0,0,0.2)',\n            borderWidth: 1\n          }, {\n            type: 'box',\n            xScaleID: 'x-axis-0',\n            yScaleID: 'y-axis-0',\n            xMin: this.state.labels[0],\n            xMax: this.state.labels[this.state.labels.length - 1],\n            yMin: -10,\n            yMax: 10,\n            borderColor: 'rgba(255,100,0,1)',\n            backgroundColor: 'rgba(255,100,0,0.2)',\n            borderWidth: 1\n          }]\n        }\n      };\n      var data = {\n        labels: this.state.labels,\n        datasets: [\n        /*{\n        label: 'Fitness dataset',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,.8)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 2,\n        pointHitRadius: 10,\n        data: this.state.fitnessValues\n        },\n        {\n        label: 'Fatigue dataset',\n        fill: false,\n        lineTension: 0.1,\n        index: 10,\n        backgroundColor: 'rgba(255,0,0,0.2)',\n        borderColor: 'rgba(255,0,0,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(255,0,0,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n        pointHoverBorderColor: 'rgba(255,0,0,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 2,\n        pointHitRadius: 10,\n        data: this.state.fatigueValues\n        },*/\n        {\n          label: 'Freshness dataset',\n          fill: false,\n          lineTension: 0.1,\n          index: 10,\n          backgroundColor: 'rgba(255,0,0,0.2)',\n          borderColor: 'rgba(255,0,0,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(255,0,0,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n          pointHoverBorderColor: 'rgba(255,0,0,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 2,\n          pointHitRadius: 10,\n          data: this.state.freshnessValues\n        }]\n      };\n      console.log(options);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(Dropdown, {\n        onChange: this.dropdownChange,\n        options: this.state.options,\n        value: this.state.selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          marginTop: '90px',\n          height: '300xp'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(Line, {\n        data: data,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DataScatter;\n}(React.Component);\n\nexport default DataScatter;","map":{"version":3,"sources":["/Users/admin/Desktop/react-native-app/ascent-web/client/src/components/Graph/Graphs.js"],"names":["React","Dropdown","Line","chartjs","Navbar","DataScatter","state","fitnessArray","props","fitness","fitnessValues","fatigueArray","fatigue","fatigueValues","freshnessArray","freshness","freshnessValues","labels","options","value","label","length","selected","selected_value","dropdownChange","event","start","i","setState","slice","getFitnessValues","placeholderFitnessScores","placeholderFatigueScores","placeholderFreshnessScores","placeholderLabels","forEach","element","push","y","x","format","response","maintainAspectRatio","scales","xAxes","ticks","maxTicksLimit","yAxes","max","Math","round","apply","min","annotation","annotations","type","xScaleID","yScaleID","xMin","xMax","yMin","yMax","borderColor","backgroundColor","borderWidth","data","datasets","fill","lineTension","index","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","console","log","marginTop","height","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport { Line } from 'react-chartjs-2';\nimport * as chartjs from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport Navbar from '../ClientPickNavbar/ClientPickNavbar'\n\n\nclass DataScatter extends React.Component {\n\n    state = {\n        fitnessArray: this.props.fitness,\n        fitnessValues: [],\n        fatigueArray: this.props.fatigue,\n        fatigueValues: [],\n        freshnessArray: this.props.freshness,\n        freshnessValues: [],\n        labels: [],\n        options: [\n            { value: 8, label: 'Past 7 Days' },\n            { value: 15, label: 'Past 14 Days' },\n            { value: 31, label: 'Past Month' },\n            { value: 91, label: 'Past 3 Months' },\n            { value: 365, label: 'Past Year' },\n            { value: this.props.fitness.length, label: 'All Time' }\n        ],\n        selected: 'Pick a range',\n        selected_value: 400\n    }\n\n\n    dropdownChange = (event) => {\n        if (event.value !== this.state.selected_value) {\n            let start = this.props.fitness.length - (event.value)\n            for (let i = 0; i < this.state.options.length; i++) {\n                if (this.state.options[i].value === event.value) {\n                    this.setState({ selected: this.state.options[i].label, selected_value: event.value }, () => {\n                        this.setState({ fitnessArray: this.props.fitness.slice(start), fatigueArray: this.props.fatigue.slice(start), freshnessArray: this.props.freshness.slice(start) }, () => {\n                            this.getFitnessValues()\n                        })\n                    })\n\n                }\n            }\n        }\n    }\n\n    getFitnessValues = () => {\n        let placeholderFitnessScores = [];\n        let placeholderFatigueScores = [];\n        let placeholderFreshnessScores = [];\n        let placeholderLabels = [];\n\n\n        this.state.fitnessArray.forEach(element => {\n            placeholderFitnessScores.push(element.y)\n            if (this.state.selected_value < 365) {\n                placeholderLabels.push(element.x.format('MMM DD'))\n            }\n            else {\n                placeholderLabels.push(element.x.format('MMM DD Y'))\n\n            }\n        })\n\n        this.state.fatigueArray.forEach(element => {\n            placeholderFatigueScores.push(element.y)\n        })\n\n        this.state.freshnessArray.forEach(element => {\n            placeholderFreshnessScores.push(element.y)\n        })\n\n\n\n        this.setState({ freshnessValues: placeholderFreshnessScores, fatigueValues: placeholderFatigueScores, fitnessValues: placeholderFitnessScores, labels: placeholderLabels })\n    }\n\n    componentWillMount() {\n        this.getFitnessValues()\n    }\n\n    render() {\n        let options = {\n            response:true,\n            maintainAspectRatio: false,\n\n            scales: {\n                xAxes: [{\n                    ticks: {\n               \n                        maxTicksLimit: this.state.selected_value > 300 ? 12 : 14\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                    max: Math.round(Math.max.apply(null,this.state.freshnessValues))+5,\n                    min: Math.round(Math.min.apply(null,this.state.freshnessValues))-5\n                    }\n                }]\n            },\n            annotation: {\n\n                annotations: [{\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -10,\n                    yMax: 1000,\n                    borderColor: 'rgba(255,159,64,1)',\n                    backgroundColor: 'rgba(255,159,64,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -30,\n                    yMax: -10,\n                    borderColor: 'rgba(0,255,0,1)',\n                    backgroundColor: 'rgba(0,255,0,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -300,\n                    yMax: -30,\n                    borderColor: 'rgba(255,0,0,1)',\n                    backgroundColor: 'rgba(255,0,0,0.2)',\n                    borderWidth: 1\n                },\n                {\n                    type: 'box',\n                    xScaleID: 'x-axis-0',\n                    yScaleID: 'y-axis-0',\n                    xMin: this.state.labels[0],\n                    xMax: this.state.labels[this.state.labels.length - 1],\n                    yMin: -10,\n                    yMax: 10,\n                    borderColor: 'rgba(255,100,0,1)',\n                    backgroundColor: 'rgba(255,100,0,0.2)',\n                    borderWidth: 1\n                }\n                ]\n            }\n        }\n\n\n\n        let data = {\n            labels: this.state.labels,\n            datasets: [/*{\n                label: 'Fitness dataset',\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: 'rgba(75,192,192,.8)',\n                borderColor: 'rgba(75,192,192,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 2,\n                pointHitRadius: 10,\n                data: this.state.fitnessValues\n            },\n            {\n                label: 'Fatigue dataset',\n                fill: false,\n                lineTension: 0.1,\n                index: 10,\n                backgroundColor: 'rgba(255,0,0,0.2)',\n                borderColor: 'rgba(255,0,0,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(255,0,0,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n                pointHoverBorderColor: 'rgba(255,0,0,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 2,\n                pointHitRadius: 10,\n                data: this.state.fatigueValues\n            },*/\n            {\n                label: 'Freshness dataset',\n                fill: false,\n                lineTension: 0.1,\n                index: 10,\n                backgroundColor: 'rgba(255,0,0,0.2)',\n                borderColor: 'rgba(255,0,0,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(255,0,0,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(255,0,0,1)',\n                pointHoverBorderColor: 'rgba(255,0,0,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 2,\n                pointHitRadius: 10,\n                data: this.state.freshnessValues\n            }]\n        }\n\n        console.log(options)\n\n        return (\n            <div>\n                <Navbar/>\n                <Dropdown \n                onChange={this.dropdownChange} \n                options={this.state.options} value={this.state.selected}\n                 />\n                 <div style={{marginTop: '90px', height:'300xp'}}>\n                <Line data={data} options={options} \n                />\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\nexport default DataScatter"]},"metadata":{},"sourceType":"module"}